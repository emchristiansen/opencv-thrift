// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "modules/core/MatUtilHandler.hpp"
#include "modules/features2d/Features2DHandler.hpp"

#include <thrift/processor/TMultiplexedProcessor.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <memory>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

//using namespace std;
using std::make_shared;
using std::string;

//using boost::shared_ptr;
//using boost::make_shared;

//using namespace  ::tutorial;

//class CalculatorHandler : virtual public CalculatorIf {
 //public:
  //CalculatorHandler() {
    //// Your initialization goes here
  //}

  //void ping() {
    //// Your implementation goes here
    //printf("ping\n");
  //}

  //int32_t add(const int32_t num1, const int32_t num2) {
    //// Your implementation goes here
    //printf("add\n");
  //}

  //int32_t calculate(const int32_t logid, const Work& w) {
    //// Your implementation goes here
    //printf("calculate\n");
  //}

  //void zip() {
    //// Your implementation goes here
    //printf("zip\n");
  //}

//};

template <typename Handler, typename Processor>
void addHandler(shared_ptr<TMultiplexedProcessor> multiplexedProcessor, const string name) {
  shared_ptr<Handler> handler(new Handler());
  shared_ptr<Processor> processor(new Processor(handler));

  multiplexedProcessor->registerProcessor(name, processor);
}

int main(int argc, char **argv) {
  //auto processor = make_shared<TMultiplexedProcessor>();
  shared_ptr<TMultiplexedProcessor> processor(new TMultiplexedProcessor());


  //auto x = make_shared<MatUtilHandler>();

  //auto a = make_shared<MatUtilProcessor>(x);

  //processor->registerProcessor(
    //"MatUtil",
    //make_shared<MatUtilProcessor>(make_shared<MatUtilHandler>()));

  //shared_ptr<MatUtilHandler> matUtilHandler(new MatUtilHandler());
  //shared_ptr<MatUtilProcessor> matUtilProcessor(new MatUtilProcessor(matUtilHandler));
  //processor->registerProcessor("MatUtil", matUtilProcessor);

  addHandler<MatUtilHandler, MatUtilProcessor>(processor, "MatUtil");
  addHandler<Features2DHandler, Features2DProcessor>(processor, "Features2D");

  //shared_ptr<MatUtilHandler> handler(new MatUtilHandler());
  //shared_ptr<TProcessor> processor(new MatUtilProcessor(handler));

  const int port = 9090;
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}


