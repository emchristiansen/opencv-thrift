/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Types_TYPES_H
#define Types_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>





class Point2d {
 public:

  static const char* ascii_fingerprint; // = "2D83AECC1446E2C25633117ADABE5995";
  static const uint8_t binary_fingerprint[16]; // = {0x2D,0x83,0xAE,0xCC,0x14,0x46,0xE2,0xC2,0x56,0x33,0x11,0x7A,0xDA,0xBE,0x59,0x95};

  Point2d() : x(0), y(0) {
  }

  virtual ~Point2d() throw() {}

  double x;
  double y;

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  bool operator == (const Point2d & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const Point2d &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Point2d & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Point2d &a, Point2d &b);


class KeyPoint {
 public:

  static const char* ascii_fingerprint; // = "F18CFD6EA9146B31D026A0673D45A451";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0x8C,0xFD,0x6E,0xA9,0x14,0x6B,0x31,0xD0,0x26,0xA0,0x67,0x3D,0x45,0xA4,0x51};

  KeyPoint() : size(0), angle(0), response(0), octave(0), class_id(0) {
  }

  virtual ~KeyPoint() throw() {}

  Point2d pt;
  double size;
  double angle;
  double response;
  int64_t octave;
  int64_t class_id;

  void __set_pt(const Point2d& val) {
    pt = val;
  }

  void __set_size(const double val) {
    size = val;
  }

  void __set_angle(const double val) {
    angle = val;
  }

  void __set_response(const double val) {
    response = val;
  }

  void __set_octave(const int64_t val) {
    octave = val;
  }

  void __set_class_id(const int64_t val) {
    class_id = val;
  }

  bool operator == (const KeyPoint & rhs) const
  {
    if (!(pt == rhs.pt))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(angle == rhs.angle))
      return false;
    if (!(response == rhs.response))
      return false;
    if (!(octave == rhs.octave))
      return false;
    if (!(class_id == rhs.class_id))
      return false;
    return true;
  }
  bool operator != (const KeyPoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyPoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(KeyPoint &a, KeyPoint &b);



#endif
