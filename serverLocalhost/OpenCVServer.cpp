// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "OpenCV/Core/MatUtilHandler.hpp"
#include "OpenCV/Features2D/Features2DHandler.hpp"

#include <thrift/processor/TMultiplexedProcessor.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

//#include <memory>
#include <thread>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

//using namespace std;
using std::make_shared;
using std::string;
using std::cout;
using std::endl;
using std::vector;

template <typename Handler, typename Processor>
std::thread startServerThread(const string name, const int port) {
  shared_ptr<Handler> handler(new Handler());
  shared_ptr<Processor> processor(new Processor(handler));

  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  std::thread serverThread(&TSimpleServer::serve, server);

  std::cout << "Spawned server " << name << " on port " << port << "." << std::endl;

  return serverThread;
}

const int matUtilPort = 9090;
const int features2DPort = 9091;

int main(int argc, char **argv) {
  std::thread matUtil = 
    startServerThread<MatUtilHandler, MatUtilProcessor>(
      "MatUtil", 
      matUtilPort);
  std::thread features2D = 
    startServerThread<Features2DHandler, Features2DProcessor>(
      "Features2D", 
      features2DPort);

  matUtil.join();
  features2D.join();

  return 0;
}


