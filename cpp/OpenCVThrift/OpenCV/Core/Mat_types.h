/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Mat_TYPES_H
#define Mat_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "OpenCVThrift/OpenCV/Core/CVDef_types.h"





class Mat {
 public:

  static const char* ascii_fingerprint; // = "772183795D0AE04DE478A3B6211CD3AC";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x21,0x83,0x79,0x5D,0x0A,0xE0,0x4D,0xE4,0x78,0xA3,0xB6,0x21,0x1C,0xD3,0xAC};

  Mat() : rows(0), cols(0), channels(0), type(( ::CVType::type)0), data() {
  }

  virtual ~Mat() throw() {}

  int64_t rows;
  int64_t cols;
  int64_t channels;
   ::CVType::type type;
  std::string data;

  void __set_rows(const int64_t val) {
    rows = val;
  }

  void __set_cols(const int64_t val) {
    cols = val;
  }

  void __set_channels(const int64_t val) {
    channels = val;
  }

  void __set_type(const  ::CVType::type val) {
    type = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  bool operator == (const Mat & rhs) const
  {
    if (!(rows == rhs.rows))
      return false;
    if (!(cols == rhs.cols))
      return false;
    if (!(channels == rhs.channels))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Mat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Mat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Mat &a, Mat &b);


class MatUnpacked {
 public:

  static const char* ascii_fingerprint; // = "E973DC0A09071677FCA82C37E29EFD3E";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0x73,0xDC,0x0A,0x09,0x07,0x16,0x77,0xFC,0xA8,0x2C,0x37,0xE2,0x9E,0xFD,0x3E};

  MatUnpacked() : rows(0), cols(0), channels(0) {
  }

  virtual ~MatUnpacked() throw() {}

  int64_t rows;
  int64_t cols;
  int64_t channels;
  std::vector<double>  data;

  void __set_rows(const int64_t val) {
    rows = val;
  }

  void __set_cols(const int64_t val) {
    cols = val;
  }

  void __set_channels(const int64_t val) {
    channels = val;
  }

  void __set_data(const std::vector<double> & val) {
    data = val;
  }

  bool operator == (const MatUnpacked & rhs) const
  {
    if (!(rows == rhs.rows))
      return false;
    if (!(cols == rhs.cols))
      return false;
    if (!(channels == rhs.channels))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const MatUnpacked &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MatUnpacked & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MatUnpacked &a, MatUnpacked &b);



#endif
