/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Features2D_TYPES_H
#define Features2D_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "OpenCVThrift/OpenCV/Core/Mat_types.h"
#include "OpenCVThrift/OpenCV/Core/Types_types.h"





class ExtractorResponse {
 public:

  static const char* ascii_fingerprint; // = "D8C9329C88DDFD2646031C21943CF553";
  static const uint8_t binary_fingerprint[16]; // = {0xD8,0xC9,0x32,0x9C,0x88,0xDD,0xFD,0x26,0x46,0x03,0x1C,0x21,0x94,0x3C,0xF5,0x53};

  ExtractorResponse() {
  }

  virtual ~ExtractorResponse() throw() {}

   ::Mat descriptors;
  std::vector<bool>  keyPointMask;

  void __set_descriptors(const  ::Mat& val) {
    descriptors = val;
  }

  void __set_keyPointMask(const std::vector<bool> & val) {
    keyPointMask = val;
  }

  bool operator == (const ExtractorResponse & rhs) const
  {
    if (!(descriptors == rhs.descriptors))
      return false;
    if (!(keyPointMask == rhs.keyPointMask))
      return false;
    return true;
  }
  bool operator != (const ExtractorResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtractorResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExtractorResponse &a, ExtractorResponse &b);



#endif
