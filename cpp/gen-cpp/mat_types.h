/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef mat_TYPES_H
#define mat_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace opencv {

typedef struct _Mat__isset {
  _Mat__isset() : rows(false), cols(false), type(false), data(false) {}
  bool rows;
  bool cols;
  bool type;
  bool data;
} _Mat__isset;

class Mat {
 public:

  static const char* ascii_fingerprint; // = "4A712C500E54918CFBA57A70D875BC7B";
  static const uint8_t binary_fingerprint[16]; // = {0x4A,0x71,0x2C,0x50,0x0E,0x54,0x91,0x8C,0xFB,0xA5,0x7A,0x70,0xD8,0x75,0xBC,0x7B};

  Mat() : rows(0), cols(0), type(0), data() {
  }

  virtual ~Mat() throw() {}

  int64_t rows;
  int64_t cols;
  int64_t type;
  std::string data;

  _Mat__isset __isset;

  void __set_rows(const int64_t val) {
    rows = val;
  }

  void __set_cols(const int64_t val) {
    cols = val;
  }

  void __set_type(const int64_t val) {
    type = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  bool operator == (const Mat & rhs) const
  {
    if (!(rows == rhs.rows))
      return false;
    if (!(cols == rhs.cols))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Mat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Mat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Mat &a, Mat &b);

} // namespace

#endif
